generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                  @id @default(autoincrement())
  username         String               @unique
  address          String
  contact          String
  email            String               @unique
  password         String
  refreshToken     String
  paymentsMade     Payment[]
  modulesProgress  UserModuleProgress[]
  coursesPurchased Course[]             @relation("UserCoursesPurchased")
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model Admin {
  id              Int       @id @default(autoincrement())
  adminname       String    @unique
  contact         String
  email           String
  address         String
  password        String
  refreshToken    String
  coursesCreated  Course[]
  modulesCreated  Module[]
  paymentReceived Payment[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Payment {
  id                Int           @id @default(autoincrement())
  date              DateTime
  amount            Float
  user              User          @relation(fields: [userId], references: [id])
  userId            Int
  course            Course        @relation(fields: [courseId], references: [id])
  courseId          Int
  Admin             Admin         @relation(fields: [adminId], references: [id])
  adminId           Int
  razorpayOrderId   String?
  razorpayPaymentId String?
  paymentStatus     PaymentStatus
}

model Course {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Float
  imageLink   String
  category    String?
  owner       Admin     @relation(fields: [ownerId], references: [id])
  ownerId     Int
  payments    Payment[]
  modules     Module[]
  purchasedBy User[]    @relation("UserCoursesPurchased")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int?
}

model Module {
  id          Int                  @id @default(autoincrement())
  title       String
  description String?
  course      Course               @relation(fields: [courseId], references: [id])
  courseId    Int
  admin       Admin                @relation(fields: [adminId], references: [id])
  adminId     Int
  completions UserModuleProgress[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model UserModuleProgress {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  module      Module    @relation(fields: [moduleId], references: [id])
  moduleId    Int
  isCompleted Boolean   @default(false)
  completedAt DateTime?

  @@unique([userId, moduleId])
}

enum PaymentStatus {
  pending
  success
  failed
}
